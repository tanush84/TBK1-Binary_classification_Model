import argparse
import pandas as pd

import joblib
import numpy as np
import pandas as pd
from rdkit import rdBase, Chem
from rdkit.Chem import AllChem, PandasTools, Descriptors
from rdkit.Chem.Draw import IPythonConsole
from rdkit.Chem import PandasTools
import os, sys
import argparse
import configparser
import time
import re
from padelpy import from_sdf
import argparse
from padelpy import padeldescriptor
from padelpy import from_smiles

df = []

def main():
    parser = argparse.ArgumentParser(description="Input for the .csv file of descriptors generated by PaDEL.")
    parser.add_argument('input_file', type=str, help='Path to the .csv file')

    args = parser.parse_args()
    
    # Check if the input file path is provided
    if not args.input_file:
        print("Please provide an input CSV file.")
        return

    df = pd.read_csv(args.input_file)

    if df is not None:
        print("DataFrame Uploaded successfully:")
        X = df.drop(df.columns[1], axis=1)
        filename = './asset/my_model_mlp-fp.joblib'
        # load the model from disk
        loaded_model = joblib.load(filename)

        y_train=pd.read_csv('./asset/tbk1_Y_train-fp.csv')
        X_train=pd.read_csv('./asset/tbk1_X_train-fp.csv')
        result = loaded_model.fit(X_train, y_train)
        y_predicted = loaded_model.predict(X)
        
        if y_predicted==1:
            print("Molecule is predicted to be Active")
        elif y_predicted==0:
            print("Molecule is predicted to be Inctive")

    else:
        print("DataFrame creation failed.")


if __name__ == "__main__":
    main()



